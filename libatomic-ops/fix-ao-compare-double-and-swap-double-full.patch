Author: Philip Boulain <philip.boulain@smoothwall.net>
Description: Cherry-pick upstream fix for GCC 4.6+ breakage
 See upstream git: https://github.com/ivmai/libatomic_ops/commit/30cea1b
 See Debian bug: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=675457
 This is not available as part of Debian's wheezy package yet; probably they
 haven't rebuilt with this compiler yet, and only seem to be fixing it in
 proposed.
--- a/src/atomic_ops/sysdeps/gcc/x86.h
+++ b/src/atomic_ops/sysdeps/gcc/x86.h
@@ -148,13 +148,16 @@
   /* If PIC is turned on, we can't use %ebx as it is reserved for the
      GOT pointer.  We can save and restore %ebx because GCC won't be
      using it for anything else (such as any of the m operands) */
-  __asm__ __volatile__("pushl %%ebx;"   /* save ebx used for PIC GOT ptr */
-                       "movl %6,%%ebx;" /* move new_val2 to %ebx */
+  /* We use %edi (for new_val1) instead of a memory operand and swap    */
+  /* instruction instead of push/pop because some GCC releases have     */
+  /* a bug in processing memory operands (if address base is %esp) in   */
+  /* the inline assembly after push.                                    */
+  __asm__ __volatile__("xchg %%ebx,%6;" /* swap GOT ptr and new_val1 */
                        "lock; cmpxchg8b %0; setz %1;"
-                       "pop %%ebx;"     /* restore %ebx */
+                       "xchg %%ebx,%6;" /* restore ebx and edi */
                        : "=m"(*addr), "=a"(result)
                        : "m"(*addr), "d" (old_val2), "a" (old_val1),
-                         "c" (new_val2), "m" (new_val1) : "memory");
+                         "c" (new_val2), "D" (new_val1) : "memory");
 #else
   /* We can't just do the same thing in non-PIC mode, because GCC
    * might be using %ebx as the memory operand.  We could have ifdef'd
