Author: Daniel Collins <daniel.collins@smoothwall.net>
Description: Adds an inout match module which matches any traffic leaving on the
 interface that received it.
--- /dev/null
+++ b/extensions/libxt_inout.c
@@ -0,0 +1,78 @@
+#include <getopt.h>
+#include <stdlib.h>
+#include <xtables.h>
+#include <stdio.h>
+#include "compat_user.h"
+#include "xt_inout.h"
+
+static const struct option inout_mt_opts[] = {
+	{.name = "inout-same", .has_arg = false, .val = 's'},
+	{NULL},
+};
+
+static void inout_mt_help(void)
+{
+	printf(
+		"inout match options:\n"
+		"[!] --inout-same          match if in/out devices are the same\n"
+	);
+}
+
+static int inout_mt_parse(int c, char **argv, int invert, unsigned int *flags,
+	const void *entry, struct xt_entry_match **match)
+{
+	struct xt_inout_mtinfo *info = (struct xt_inout_mtinfo*)(*match)->data;
+
+	switch (c) {
+	case 's':
+		info->test   = true;
+		info->invert = invert;
+
+		return true;
+	}
+
+	return false;
+}
+
+static void inout_mt_save(const void *ip, const struct xt_entry_match *match)
+{
+	const struct xt_inout_mtinfo *info = (struct xt_inout_mtinfo*)match->data;
+
+	if(info->test)
+	{
+		if(info->invert)
+		{
+			printf(" !");
+		}
+
+		printf(" --inout-same");
+	}
+
+	printf(" ");
+}
+
+static void inout_mt_print(const void *ip, const struct xt_entry_match *match, int numeric)
+{
+	printf(" -m inout");
+	inout_mt_save(ip, match);
+}
+
+static struct xtables_match inout_mt_reg = {
+	.version	= XTABLES_VERSION,
+	.name		= "inout",
+	.revision	= 0,
+	.family		= NFPROTO_UNSPEC,
+	.size		= XT_ALIGN(sizeof(struct xt_inout_mtinfo)),
+	.userspacesize	= XT_ALIGN(sizeof(struct xt_inout_mtinfo)),
+	.help		= &inout_mt_help,
+	.parse		= &inout_mt_parse,
+	.final_check	= NULL,
+	.print		= &inout_mt_print,
+	.save		= &inout_mt_save,
+	.extra_opts	= inout_mt_opts,
+};
+
+static void _init(void)
+{
+	xtables_register_match(&inout_mt_reg);
+}
--- /dev/null
+++ b/extensions/xt_inout.c
@@ -0,0 +1,74 @@
+#include <linux/if.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/netdevice.h>
+#include <linux/skbuff.h>
+#include <linux/version.h>
+#include <linux/netfilter/x_tables.h>
+#include "compat_xtables.h"
+#include "xt_inout.h"
+
+MODULE_AUTHOR("Daniel Collins <daniel.collins@smoothwall.net>");
+MODULE_DESCRIPTION("Xtables: inout match module");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("ipt_inout");
+MODULE_ALIAS("ip6t_inout");
+
+static bool xt_inout_mt(const struct sk_buff *skb, struct xt_action_param *par)
+{
+	const struct xt_inout_mtinfo *info = par->matchinfo;
+
+	if(info->test)
+	{
+		if(xt_in(par) == NULL || xt_out(par) == NULL)
+		{
+			return false;
+		}
+
+		bool same = (xt_in(par)->ifindex == xt_out(par)->ifindex);
+		if(info->invert)
+		{
+			same = !same;
+		}
+
+		if(!same)
+		{
+			return false;
+		}
+	}
+
+	return true;
+}
+
+static struct xt_match xt_inout_mt_reg[] __read_mostly = {
+	{
+		.name       = "inout",
+		.revision   = 0,
+		.family     = NFPROTO_IPV4,
+		.matchsize  = sizeof(struct xt_inout_mtinfo),
+		.match      = &xt_inout_mt,
+		.me         = THIS_MODULE,
+	},
+	{
+		.name       = "inout",
+		.revision   = 0,
+		.family     = NFPROTO_IPV6,
+		.matchsize  = sizeof(struct xt_inout_mtinfo),
+		.match      = &xt_inout_mt,
+		.me         = THIS_MODULE,
+	},
+};
+
+static int __init xt_inout_match_init(void)
+{
+	return xt_register_matches(xt_inout_mt_reg,
+		ARRAY_SIZE(xt_inout_mt_reg));
+}
+
+static void __exit xt_inout_match_exit(void)
+{
+	xt_unregister_matches(xt_inout_mt_reg, ARRAY_SIZE(xt_inout_mt_reg));
+}
+
+module_init(xt_inout_match_init);
+module_exit(xt_inout_match_exit);
--- a/extensions/Mbuild
+++ b/extensions/Mbuild
@@ -23,3 +23,4 @@
 obj-${build_quota2}      += libxt_quota2.so
 obj-${build_gradm}       += libxt_gradm.so
 obj-${build_mod}         += libxt_mod.so
+obj-${build_inout}       += libxt_inout.so
--- /dev/null
+++ b/extensions/inout.Kbuild
@@ -0,0 +1 @@
+obj-${build_inout} += xt_inout.o
--- a/mconfig
+++ b/mconfig
@@ -23,3 +23,4 @@
 build_psd=m
 build_quota2=m
 build_mod=m
+build_inout=m
--- /dev/null
+++ b/extensions/xt_inout.h
@@ -0,0 +1,12 @@
+#ifndef _LINUX_NETFILTER_XT_INOUT_H
+#define _LINUX_NETFILTER_XT_INOUT_H
+
+#include <stdbool.h>
+
+struct xt_inout_mtinfo
+{
+	bool test;
+	bool invert;
+};
+
+#endif
